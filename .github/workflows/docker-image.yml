name: Docker Image Builder

on:
  push:
    paths: 
      - Dockerfile 
      - '**.py'
      - workflow\docker-image.yml
  pull_request:
    branches: [ "main" ]

jobs:

  push_to_registries:
    name: Push Docker image to multiple registries
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: read
    steps:
      - name: Check out the repo
        uses: actions/checkout@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@f054a8b539a109f9f41c372932f1ae047eff08c9
        with:
          username: ${{ secrets.DOCKERUSENAME }}
          password: ${{ secrets.DOCKERTOKEN }}

      - name: Log in to the Container registry
        uses: docker/login-action@f054a8b539a109f9f41c372932f1ae047eff08c9
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@98669ae865ea3cffbcbaa878cf57c20bbf1c6c38
        with:
          images: |
            vincdelta/discordbot
            ghcr.io/${{ github.repository }}

      - name: Build and push Docker images
        uses: docker/build-push-action@ad44023a93711e3deb337508980b4b5e9bcdc5dc
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  test:
      
      needs: push_to_registries
      runs-on: ubuntu-latest
  
      steps:
        - name: rebuilding DO App
          shell: pwsh
          env:
            DIGITALOCEAN_APP_ID_DEV: ${{ secrets.DIGITALOCEAN_APP_ID_DEV }}
            DIGITALOCEAN_ACCESS_TOKEN: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
          run: | 
            $header = @{"Content-Type" = "application/json";"Authorization" = "Bearer $env:DIGITALOCEAN_ACCESS_TOKEN"}
            $ListApps = Invoke-RestMethod -Uri https://api.digitalocean.com/v2/apps -Method GET -Headers $header
            $DevAppID = $($ListApps.apps | Where-Object {$_.spec.name -eq "mapbot-dev"}).id
            $rebuild=Invoke-RestMethod -Uri "https://api.digitalocean.com/v2/apps/$DevAppID/deployments" -header $header -method POST -ContentType 'application/json'
            if($rebuild.deployment){
              write-output 'rebuild started'
              $deploymentID=$rebuild.deployment.id
              do{
                $StatusOutput = "Still rebuilding $status..."
                if($null -ne $StatusOutputFormat){$StatusOutputFormat = "$StatusOutputFormat{0}" -f '.'}else{$StatusOutputFormat = "$StatusOutput{0}" -f '.'}
                $status = Invoke-RestMethod -Uri https://api.digitalocean.com/v2/apps/$DevAppID/deployments/$deploymentID -Method GET -Headers $header
                $status = $status.deployment.phase
                write-output $StatusOutputFormat
              }until($status -eq 'ACTIVE')
              write-output 'rebuild finished'
            }
            else{throw 'something went wrong'}
